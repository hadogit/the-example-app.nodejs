ARTIFACTORY_URL = "http://157.175.86.184:8081/artifactory"
ARTIFACT_NAME = ""
BuildersJobPath = "nodejs-pipeline/"
CONTAINER_NAME = "mynodejs"
def STAGING_ENVIRONMENT = [:]
STAGING_ENVIRONMENT.name = 'staging'
STAGING_ENVIRONMENT.host = '157.175.82.31'
STAGING_ENVIRONMENT.allowAnyHosts = true

pipeline {
    agent any
	 parameters {
        string(name: 'Build_Number', defaultValue: "", description: 'Insert build number to deploy staging')
		string(name: 'Branch', defaultValue: "yakir", description: 'Insert branch name')
		}
    stages {
	
		stage('Prepare Environment'){
			when {
                expression {
                    params.Build_Number == ""
                }
            }
			steps{
				script{
					BuildersJobPath = BuildersJobPath + params.Branch
					Build_Number = getBuildNumber(BuildersJobPath)
					ARTIFACT_NAME = "artifacts-${Branch}-${Build_Number}.tar.gz"
				}
			}
		}
		stage('Deploy To Staging') { 
            steps {
                script{
                    echo "Deploying To Development..."
				    withCredentials([sshUserPrivateKey(credentialsId: 'environment-user', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'ubuntu')]) {
				        STAGING_ENVIRONMENT.user = "ubuntu"
                        STAGING_ENVIRONMENT.identityFile = identity
				    	sshCommand remote: STAGING_ENVIRONMENT, command: "wget --user interview --password interview123! ${ARTIFACTORY_URL}/example-repo-local/${Branch}/${ARTIFACT_NAME}"				
				        sshCommand remote: STAGING_ENVIRONMENT, command: "tar xvf ${ARTIFACT_NAME} && npm run start&"
				        sshCommand remote: STAGING_ENVIRONMENT, command: "sudo docker build -t nodejs/${Build_Number} ."
				        sshCommand remote: STAGING_ENVIRONMENT, command: 'sudo docker stop $(sudo docker container ls -aq)'
				        sshCommand remote: STAGING_ENVIRONMENT, command: "sudo docker run -d --name=${CONTAINER_NAME} nodejs/${Build_Number}"
				    }
					echo "Running on ${STAGING_ENVIRONMENT.host}:3000"
					currentBuild.description = "${STAGING_ENVIRONMENT.host}:3000"
                }
            }
        }
    }
	post{
		success {
		    script{
				echo "Success"
			}
		}
	}
}


@NonCPS
def getBuildNumber(String jobName) {
    print("getBuildNumber")
    def job = Jenkins.instance.getItemByFullName(jobName)
    return job.getLastSuccessfulBuild().getNumber()
}
